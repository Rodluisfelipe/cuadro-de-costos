// Script de debug para verificar el flujo de aprobaci√≥n completo
// Ejecutar en la consola del navegador

console.log('üîç Iniciando debug del flujo de aprobaci√≥n...')

// Funci√≥n para verificar el estado actual del sistema
const debugFlujoAprobacion = async () => {
  console.log('üìä === ESTADO ACTUAL DEL SISTEMA ===')
  
  // 1. Verificar IndexedDB
  console.log('\nüîç 1. Verificando IndexedDB...')
  try {
    const db = indexedDB.open('CotizacionesDB', 1)
    db.onsuccess = function(event) {
      const database = event.target.result
      const transaction = database.transaction(['cotizaciones'], 'readonly')
      const store = transaction.objectStore('cotizaciones')
      const request = store.getAll()
      
      request.onsuccess = function() {
        const cotizacionesDB = request.result
        console.log('üìä [IndexedDB] Total de cotizaciones:', cotizacionesDB.length)
        
        // Agrupar por estado
        const porEstado = {}
        cotizacionesDB.forEach(quote => {
          const status = quote.status || 'sin_estado'
          if (!porEstado[status]) {
            porEstado[status] = []
          }
          porEstado[status].push(quote)
        })
        
        console.log('üìä [IndexedDB] Cotizaciones por estado:')
        Object.entries(porEstado).forEach(([status, quotes]) => {
          console.log(`  ${status}: ${quotes.length} cotizaciones`)
        })
        
        // Mostrar cotizaciones pendientes de aprobaci√≥n
        const pendingQuotes = cotizacionesDB.filter(q => 
          q.status === 'pending' || q.status === 'sent_for_approval' || q.status === 'pending_approval'
        )
        
        console.log(`\nüîç [IndexedDB] Cotizaciones pendientes de aprobaci√≥n: ${pendingQuotes.length}`)
        pendingQuotes.forEach((quote, index) => {
          console.log(`  ${index + 1}. ID: ${quote.id}, Cliente: ${quote.clienteName}, Estado: ${quote.status}, Items: ${quote.rows?.length || 0}`)
        })
        
        // Continuar con la verificaci√≥n del hook
        verificarHook(cotizacionesDB)
      }
    }
  } catch (error) {
    console.error('‚ùå Error verificando IndexedDB:', error)
  }
}

// Funci√≥n para verificar el hook useCotizaciones
const verificarHook = (cotizacionesDB) => {
  console.log('\nüîç 2. Verificando hook useCotizaciones...')
  
  // Verificar si el hook est√° disponible en el componente RevisorPanel
  if (window.RevisorPanelDebug) {
    console.log('‚úÖ Hook disponible en RevisorPanel')
    console.log('üìä Cotizaciones del hook:', window.RevisorPanelDebug.cotizaciones)
    console.log('üìä Loading del hook:', window.RevisorPanelDebug.loading)
  } else {
    console.log('‚ö†Ô∏è Hook no disponible en RevisorPanel')
  }
  
  // Verificar si hay diferencias entre IndexedDB y el hook
  if (window.RevisorPanelDebug && window.RevisorPanelDebug.cotizaciones) {
    const hookCotizaciones = window.RevisorPanelDebug.cotizaciones
    console.log(`\nüîç Comparando IndexedDB (${cotizacionesDB.length}) vs Hook (${hookCotizaciones.length})`)
    
    if (cotizacionesDB.length !== hookCotizaciones.length) {
      console.log('‚ö†Ô∏è Diferencia en cantidad de cotizaciones')
      console.log('  IndexedDB:', cotizacionesDB.length)
      console.log('  Hook:', hookCotizaciones.length)
    } else {
      console.log('‚úÖ Cantidad de cotizaciones coincide')
    }
  }
  
  // Continuar con la verificaci√≥n del componente
  verificarComponente(cotizacionesDB)
}

// Funci√≥n para verificar el componente RevisorPanel
const verificarComponente = (cotizacionesDB) => {
  console.log('\nüîç 3. Verificando componente RevisorPanel...')
  
  // Verificar si el componente est√° montado
  const revisorPanel = document.querySelector('[data-testid="revisor-panel"]') || 
                      document.querySelector('.min-h-screen.bg-gradient-to-br')
  
  if (revisorPanel) {
    console.log('‚úÖ Componente RevisorPanel encontrado en el DOM')
    
    // Verificar si hay cotizaciones mostradas
    const quoteCards = revisorPanel.querySelectorAll('.bg-white\\/80')
    console.log(`üìä Tarjetas de cotizaciones encontradas: ${quoteCards.length}`)
    
    if (quoteCards.length === 0) {
      console.log('‚ö†Ô∏è No hay tarjetas de cotizaciones visibles')
      
      // Verificar si hay mensaje de "no hay cotizaciones"
      const noQuotesMessage = revisorPanel.querySelector('.text-xl.font-semibold.text-gray-900')
      if (noQuotesMessage) {
        console.log('üìù Mensaje mostrado:', noQuotesMessage.textContent)
      }
    }
  } else {
    console.log('‚ö†Ô∏è Componente RevisorPanel no encontrado en el DOM')
  }
  
  // Continuar con la verificaci√≥n del filtro
  verificarFiltro(cotizacionesDB)
}

// Funci√≥n para verificar el filtro aplicado
const verificarFiltro = (cotizacionesDB) => {
  console.log('\nüîç 4. Verificando filtro aplicado...')
  
  // Verificar qu√© filtro est√° activo
  const filterButtons = document.querySelectorAll('button[onclick*="setFilter"]')
  let activeFilter = 'unknown'
  
  filterButtons.forEach(button => {
    if (button.classList.contains('bg-gradient-to-r')) {
      const text = button.textContent.trim()
      if (text.includes('Pendientes')) activeFilter = 'pending'
      else if (text.includes('Todas')) activeFilter = 'all'
      else if (text.includes('Aprobadas')) activeFilter = 'approved'
      else if (text.includes('Rechazadas')) activeFilter = 'rejected'
      else if (text.includes('Re-cotizaci√≥n')) activeFilter = 'revision'
    }
  })
  
  console.log(`üìä Filtro activo: ${activeFilter}`)
  
  // Verificar si el filtro est√° afectando la visualizaci√≥n
  const pendingQuotes = cotizacionesDB.filter(q => 
    q.status === 'pending' || q.status === 'sent_for_approval' || q.status === 'pending_approval'
  )
  
  if (activeFilter === 'pending' && pendingQuotes.length === 0) {
    console.log('‚ö†Ô∏è Filtro "pending" activo pero no hay cotizaciones pendientes')
  } else if (activeFilter === 'pending' && pendingQuotes.length > 0) {
    console.log(`‚úÖ Filtro "pending" activo y hay ${pendingQuotes.length} cotizaciones pendientes`)
  }
  
  // Continuar con la verificaci√≥n final
  verificarFinal(cotizacionesDB)
}

// Funci√≥n para verificaci√≥n final y recomendaciones
const verificarFinal = (cotizacionesDB) => {
  console.log('\nüîç 5. Verificaci√≥n final y recomendaciones...')
  
  const pendingQuotes = cotizacionesDB.filter(q => 
    q.status === 'pending' || q.status === 'sent_for_approval' || q.status === 'pending_approval'
  )
  
  console.log('\nüìã === RESUMEN DEL DIAGN√ìSTICO ===')
  console.log(`‚Ä¢ Total de cotizaciones en BD: ${cotizacionesDB.length}`)
  console.log(`‚Ä¢ Cotizaciones pendientes de aprobaci√≥n: ${pendingQuotes.length}`)
  console.log(`‚Ä¢ Estados disponibles: ${[...new Set(cotizacionesDB.map(q => q.status).filter(Boolean))].join(', ')}`)
  
  if (pendingQuotes.length === 0) {
    console.log('\n‚ö†Ô∏è PROBLEMA IDENTIFICADO: No hay cotizaciones pendientes de aprobaci√≥n')
    console.log('üí° RECOMENDACIONES:')
    console.log('  1. Verifica que se est√©n guardando con el estado correcto (pending_approval)')
    console.log('  2. Usa el bot√≥n "Crear Test" en el RevisorPanel para generar datos de prueba')
    console.log('  3. Verifica la consola del CostosTable cuando env√≠es una cotizaci√≥n')
    console.log('  4. Revisa si hay errores en la funci√≥n saveCotizacion')
  } else {
    console.log('\n‚úÖ DATOS ENCONTRADOS: Hay cotizaciones pendientes de aprobaci√≥n')
    console.log('üí° RECOMENDACIONES:')
    console.log('  1. Verifica que el hook useCotizaciones est√© sincronizado')
    console.log('  2. Usa el bot√≥n "Recargar" en el RevisorPanel')
    console.log('  3. Verifica que el filtro est√© en "pending"')
  }
  
  console.log('\nüîß === ACCIONES RECOMENDADAS ===')
  console.log('1. Ejecuta: crearCotizacionPrueba() - Para generar datos de prueba')
  console.log('2. Ejecuta: debugCotizaciones() - Para ver todas las cotizaciones')
  console.log('3. Verifica la consola del CostosTable al enviar a aprobaci√≥n')
  console.log('4. Usa los botones de debug en el RevisorPanel')
}

// Funci√≥n para crear una cotizaci√≥n de prueba
const crearCotizacionPrueba = async () => {
  console.log('üß™ Creando cotizaci√≥n de prueba...')
  
  try {
    const db = indexedDB.open('CotizacionesDB', 1)
    db.onsuccess = function(event) {
      const database = event.target.result
      const transaction = database.transaction(['cotizaciones'], 'readwrite')
      const store = transaction.objectStore('cotizaciones')
      
      const testQuote = {
        cotizacion_id: 'TEST-DEBUG-' + Date.now(),
        clienteName: 'Cliente Debug',
        vendorName: 'Vendedor Debug',
        vendorEmail: 'debug@test.com',
        status: 'pending_approval',
        totalGeneral: 1000000,
        trmGlobal: 4200,
        date: new Date().toISOString(),
        dateFormatted: new Date().toLocaleString('es-CO'),
        rows: [
          {
            id: 1,
            itemName: 'Producto Debug',
            mayorista: 'Proveedor Debug',
            marca: 'Debug',
            referencia: 'DEBUG-001',
            configuracion: 'Configuraci√≥n de prueba',
            cantidad: 1,
            costoUSD: 100,
            costoCOP: 420000,
            pvpUnitario: 1000000,
            pvpTotal: 1000000,
            margen: 20,
            trm: 4200
          }
        ],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
      
      const request = store.add(testQuote)
      
      request.onsuccess = () => {
        console.log('‚úÖ Cotizaci√≥n de prueba creada con ID:', request.result)
        console.log('üîÑ Recargando p√°gina para ver los cambios...')
        setTimeout(() => {
          window.location.reload()
        }, 1000)
      }
      
      request.onerror = () => {
        console.error('‚ùå Error creando cotizaci√≥n de prueba:', request.error)
      }
      
    }
    
  } catch (error) {
    console.error('‚ùå Error en crearCotizacionPrueba:', error)
  }
}

// Ejecutar debug principal
debugFlujoAprobacion().catch(console.error)

// Exponer funciones globalmente
window.debugFlujoAprobacion = debugFlujoAprobacion
window.crearCotizacionPrueba = crearCotizacionPrueba

console.log('üîß Funciones disponibles:')
console.log('  debugFlujoAprobacion() - Verificar estado completo del sistema')
console.log('  crearCotizacionPrueba() - Crear cotizaci√≥n de prueba')
